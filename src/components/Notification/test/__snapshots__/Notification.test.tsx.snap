// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    SnackbarContentProps={
        Object {
            "aria-describedby": "message-id",
          }
    }
    onClose={[Function]}
    open={[Function]}
    text={
        <span
            id="message-id"
        >
            I love snacks
        </span>
    }
    transition=""
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "SnackbarContentProps": Object {
        "aria-describedby": "message-id",
      },
      "autoHideDuration": undefined,
      "message": <span
        id="message-id"
>
        I love snacks
</span>,
      "onClose": [Function],
      "open": [Function],
      "text": <span
        id="message-id"
>
        I love snacks
</span>,
      "transition": "",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "SnackbarContentProps": Object {
          "aria-describedby": "message-id",
        },
        "autoHideDuration": undefined,
        "message": <span
          id="message-id"
>
          I love snacks
</span>,
        "onClose": [Function],
        "open": [Function],
        "text": <span
          id="message-id"
>
          I love snacks
</span>,
        "transition": "",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
